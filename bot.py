import discord
from discord.ext import commands
import json
import os
from datetime import datetime
import asyncio

# Configura√ß√µes do bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

# Configura√ß√µes (substitua pelos IDs do seu servidor)
CONFIG = {
    "GUILD_ID": 1390409777305092166,  # ID do seu servidor
    "TICKET_CATEGORY_ID": 1390409779570020420,  # ID da categoria onde os tickets ser√£o criados
    "LOGS_CHANNEL_ID": 1390433781063618742,  # ID do canal onde os logs ser√£o enviados
    "ROLE_REQUEST_CHANNEL_ID": 1390409777326329989,  # ID do canal onde o painel de cargos ser√° enviado
    "ROLE_ADMIN_CHANNEL_ID": 1390434044864626728,  # ID do canal onde admins ver√£o solicita√ß√µes
    "AVAILABLE_ROLES": [  1390409777305092171,# IDs dos cargos dispon√≠veis para solicita√ß√£o
        # Exemplo: 123456789012345678
    ]
}

# Armazenamento de dados dos tickets
tickets_data = {}
role_requests = {}

def is_admin():
    """Verifica se o usu√°rio tem permiss√µes de administrador"""
    def predicate(ctx):
        return ctx.author.guild_permissions.administrator
    return commands.check(predicate)

def save_ticket_log(ticket_id, messages):
    """Salva o log do ticket em arquivo"""
    if not os.path.exists('ticket_logs'):
        os.makedirs('ticket_logs')
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"ticket_logs/ticket_{ticket_id}_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"=== LOG DO TICKET #{ticket_id} ===\n")
        f.write(f"Criado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        f.write("=" * 50 + "\n\n")
        
        for msg in messages:
            f.write(f"[{msg['timestamp']}] {msg['author']}: {msg['content']}\n")
    
    return filename

@bot.event
async def on_ready():
    print(f'{bot.user} est√° online!')
    print(f'Conectado em {len(bot.guilds)} servidor(s)')
    
    # Sincroniza comandos slash
    try:
        synced = await bot.tree.sync()
        print(f'Sincronizados {len(synced)} comando(s) slash')
    except Exception as e:
        print(f'Erro ao sincronizar comandos: {e}')

# ========== SISTEMA DE TICKETS ==========

class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üé´ Criar Ticket', style=discord.ButtonStyle.primary, custom_id='create_ticket')
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = interaction.guild
        user = interaction.user
        
        # Verifica se o usu√°rio j√° tem um ticket aberto
        # Busca por canais que come√ßam com ticket- e cont√™m o display name do usu√°rio
        user_display_name = user.display_name.lower()
        safe_name = ''.join(c for c in user_display_name if c.isalnum() or c in '-_')
        safe_name = safe_name[:20] if len(safe_name) > 20 else safe_name
        
        existing_ticket = discord.utils.get(guild.channels, name=f'ticket-{safe_name}')
        # Fallback: busca pelo ID tamb√©m (caso j√° exista um ticket com ID)
        if not existing_ticket:
            existing_ticket = discord.utils.get(guild.channels, name=f'ticket-{user.id}')
        
        if existing_ticket:
            await interaction.response.send_message('Voc√™ j√° possui um ticket aberto!', ephemeral=True)
            return
        
        # Cria o canal do ticket
        category = guild.get_channel(CONFIG["TICKET_CATEGORY_ID"])
        if not category:
            await interaction.response.send_message('Categoria de tickets n√£o encontrada!', ephemeral=True)
            return
        
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        # Adiciona permiss√µes para administradores
        for role in guild.roles:
            if role.permissions.administrator:
                overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        # Usa o apelido da pessoa no servidor (display_name)
        # Remove caracteres especiais para nome do canal
        user_display_name = user.display_name.lower()
        # Remove caracteres n√£o permitidos em nomes de canais
        safe_name = ''.join(c for c in user_display_name if c.isalnum() or c in '-_')
        # Limita o tamanho do nome
        safe_name = safe_name[:20] if len(safe_name) > 20 else safe_name
        
        channel = await category.create_text_channel(
            name=f'ticket-{safe_name}',
            overwrites=overwrites
        )
        
        # Inicializa dados do ticket
        ticket_id = str(channel.id)
        tickets_data[ticket_id] = {
            'user_id': user.id,
            'channel_id': channel.id,
            'created_at': datetime.now().isoformat(),
            'messages': []
        }
        
        # Cria embed de boas-vindas
        embed = discord.Embed(
            title='üé´ Ticket Criado',
            description=f'Ol√° {user.mention}! Seu ticket foi criado com sucesso.\n\nDescreva seu problema ou d√∫vida que um admistrador da Antlove ir√° te ajudar em breve.',
            color=0x00ff00
        )
        embed.set_footer(text=f'Ticket ID: {ticket_id}')
        
        # Envia mensagem com bot√µes de controle
        control_view = TicketControlView(ticket_id)
        await channel.send(embed=embed, view=control_view)
        
        await interaction.response.send_message(f'Ticket criado com sucesso! {channel.mention}', ephemeral=True)

class TicketControlView(discord.ui.View):
    def __init__(self, ticket_id):
        super().__init__(timeout=None)
        self.ticket_id = ticket_id
    
    @discord.ui.button(label='üîí Fechar Ticket', style=discord.ButtonStyle.danger, custom_id='close_ticket')
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verifica se √© administrador
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message('Apenas administradores podem fechar tickets!', ephemeral=True)
            return
        
        channel = interaction.channel
        ticket_data = tickets_data.get(self.ticket_id)
        
        if not ticket_data:
            await interaction.response.send_message('Dados do ticket n√£o encontrados!', ephemeral=True)
            return
        
        # Coleta mensagens do canal
        messages = []
        async for message in channel.history(limit=None, oldest_first=True):
            if not message.author.bot or message.embeds:
                messages.append({
                    'timestamp': message.created_at.strftime('%d/%m/%Y %H:%M:%S'),
                    'author': str(message.author),
                    'content': message.content or '[Embed/Anexo]'
                })
        
        # Salva log
        log_file = save_ticket_log(self.ticket_id, messages)
        
        # Envia log para canal de logs
        logs_channel = interaction.guild.get_channel(CONFIG["LOGS_CHANNEL_ID"])
        if logs_channel:
            user = interaction.guild.get_member(ticket_data['user_id'])
            embed = discord.Embed(
                title='üîí Ticket Fechado',
                description=f'**Usu√°rio:** {user.mention if user else "Usu√°rio n√£o encontrado"}\n**Fechado por:** {interaction.user.mention}\n**Data:** {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}',
                color=0xff0000
            )
            embed.set_footer(text=f'Ticket ID: {self.ticket_id}')
            
            with open(log_file, 'rb') as f:
                file = discord.File(f, filename=f'ticket_log_{self.ticket_id}.txt')
                await logs_channel.send(embed=embed, file=file)
        
        # Remove dados do ticket
        del tickets_data[self.ticket_id]
        
        await interaction.response.send_message('Ticket ser√° fechado em 5 segundos...')
        await asyncio.sleep(5)
        await channel.delete()

# ========== SISTEMA DE SOLICITA√á√ÉO DE CARGOS ==========

class RoleRequestView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üìã Solicitar Cargo', style=discord.ButtonStyle.secondary, custom_id='request_role')
    async def request_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.user
        guild = interaction.guild
        
        # Verifica se j√° tem uma solicita√ß√£o pendente
        if user.id in role_requests:
            await interaction.response.send_message('Voc√™ j√° possui uma solicita√ß√£o pendente!', ephemeral=True)
            return
        
        # Cria lista de cargos dispon√≠veis
        available_roles = []
        for role_id in CONFIG["AVAILABLE_ROLES"]:
            role = guild.get_role(role_id)
            if role:
                available_roles.append(role)
        
        if not available_roles:
            await interaction.response.send_message('Nenhum cargo dispon√≠vel para solicita√ß√£o!', ephemeral=True)
            return
        
        # Cria modal para solicita√ß√£o
        modal = RoleRequestModal(available_roles)
        await interaction.response.send_modal(modal)

class RoleRequestModal(discord.ui.Modal):
    def __init__(self, available_roles):
        super().__init__(title='Solicitar Cargo')
        self.available_roles = available_roles
        
        # Campo para nome do recrutador
        self.recruiter_name = discord.ui.TextInput(
            label='Nome do Recrutador',
            placeholder='Digite o nome de quem te recrutou...',
            style=discord.TextStyle.short,
            required=True,
            max_length=100
        )
        self.add_item(self.recruiter_name)
        
        # Campo para n√∫mero ingame
        self.ingame_number = discord.ui.TextInput(
            label='N√∫mero Ingame',
            placeholder='Digite seu n√∫mero ingame...',
            style=discord.TextStyle.short,
            required=True,
            max_length=50
        )
        self.add_item(self.ingame_number)
        
        # Campo para cargo desejado
        roles_text = '\n'.join([f'{i+1}. {role.name}' for i, role in enumerate(available_roles)])
        self.role_choice = discord.ui.TextInput(
            label=f'N√∫mero do cargo desejado:\n{roles_text}',
            placeholder='Digite o n√∫mero do cargo desejado',
            style=discord.TextStyle.short,
            required=True,
            max_length=2
        )
        self.add_item(self.role_choice)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            choice = int(self.role_choice.value) - 1
            if choice < 0 or choice >= len(self.available_roles):
                await interaction.response.send_message('N√∫mero de cargo inv√°lido!', ephemeral=True)
                return
            
            selected_role = self.available_roles[choice]
            user = interaction.user
            
            # Salva solicita√ß√£o com os dados separados
            request_id = f"{user.id}_{int(datetime.now().timestamp())}"
            role_requests[user.id] = {
                'request_id': request_id,
                'user_id': user.id,
                'role_id': selected_role.id,
                'recruiter_name': self.recruiter_name.value,
                'ingame_number': self.ingame_number.value,
                'timestamp': datetime.now().isoformat()
            }
            
            # Envia para canal de administradores
            admin_channel = interaction.guild.get_channel(CONFIG["ROLE_ADMIN_CHANNEL_ID"])
            if admin_channel:
                embed = discord.Embed(
                    title='üìã Nova Solicita√ß√£o de Cargo',
                    description=f'**Usu√°rio:** {user.mention}\n**Cargo solicitado:** {selected_role.mention}\n**Recrutador:** {self.recruiter_name.value}\n**N√∫mero Ingame:** {self.ingame_number.value}',
                    color=0x830000
                )
                embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
                embed.set_footer(text=f'Request ID: {request_id}')
                
                view = RoleAdminView(request_id)
                await admin_channel.send(embed=embed, view=view)
            
            await interaction.response.send_message('Solicita√ß√£o enviada com sucesso! Aguarde a aprova√ß√£o dos administradores.', ephemeral=True)
            
        except ValueError:
            await interaction.response.send_message('Por favor, digite apenas o n√∫mero do cargo!', ephemeral=True)

class RoleAdminView(discord.ui.View):
    def __init__(self, request_id):
        super().__init__(timeout=None)
        self.request_id = request_id
    
    @discord.ui.button(label='‚úÖ Aprovar', style=discord.ButtonStyle.success, custom_id='approve_role')
    async def approve_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message('Apenas administradores podem aprovar solicita√ß√µes!', ephemeral=True)
            return
        
        # Encontra a solicita√ß√£o
        request_data = None
        for user_id, data in role_requests.items():
            if data['request_id'] == self.request_id:
                request_data = data
                break
        
        if not request_data:
            await interaction.response.send_message('Solicita√ß√£o n√£o encontrada!', ephemeral=True)
            return
        
        user = interaction.guild.get_member(request_data['user_id'])
        role = interaction.guild.get_role(request_data['role_id'])
        
        if not user or not role:
            await interaction.response.send_message('Usu√°rio ou cargo n√£o encontrado!', ephemeral=True)
            return
        
        try:
            await user.add_roles(role, reason=f'Aprovado por {interaction.user}')
            
            # Remove solicita√ß√£o
            del role_requests[request_data['user_id']]
            
            # Atualiza mensagem
            embed = discord.Embed(
                title='‚úÖ Solicita√ß√£o Aprovada',
                description=f'**Usu√°rio:** {user.mention}\n**Cargo:** {role.mention}\n**Recrutador:** {request_data["recruiter_name"]}\n**N√∫mero Ingame:** {request_data["ingame_number"]}\n**Aprovado por:** {interaction.user.mention}',
                color=0x00ff00
            )
            
            await interaction.response.edit_message(embed=embed, view=None)
            
            # Notifica usu√°rio
            try:
                await user.send(f'Sua solicita√ß√£o para o cargo **{role.name}** foi aprovada!')
            except:
                pass
                
        except discord.Forbidden:
            await interaction.response.send_message('N√£o tenho permiss√£o para adicionar este cargo!', ephemeral=True)
    
    @discord.ui.button(label='‚ùå Reprovar', style=discord.ButtonStyle.danger, custom_id='deny_role')
    async def deny_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message('Apenas administradores podem reprovar solicita√ß√µes!', ephemeral=True)
            return
        
        # Encontra a solicita√ß√£o
        request_data = None
        for user_id, data in role_requests.items():
            if data['request_id'] == self.request_id:
                request_data = data
                break
        
        if not request_data:
            await interaction.response.send_message('Solicita√ß√£o n√£o encontrada!', ephemeral=True)
            return
        
        user = interaction.guild.get_member(request_data['user_id'])
        role = interaction.guild.get_role(request_data['role_id'])
        
        # Remove solicita√ß√£o
        del role_requests[request_data['user_id']]
        
        # Atualiza mensagem
        embed = discord.Embed(
            title='‚ùå Solicita√ß√£o Reprovada',
            description=f'**Usu√°rio:** {user.mention if user else "Usu√°rio n√£o encontrado"}\n**Cargo:** {role.mention if role else "Cargo n√£o encontrado"}\n**Recrutador:** {request_data.get("recruiter_name", "N/A")}\n**N√∫mero Ingame:** {request_data.get("ingame_number", "N/A")}\n**Reprovado por:** {interaction.user.mention}',
            color=0xff0000
        )
        
        await interaction.response.edit_message(embed=embed, view=None)
        
        # Notifica usu√°rio
        if user:
            try:
                await user.send(f'Sua solicita√ß√£o para o cargo **{role.name if role else "Desconhecido"}** foi reprovada.')
            except:
                pass

# ========== COMANDOS ==========

@bot.tree.command(name='setup_tickets', description='Configura o sistema de tickets')
@discord.app_commands.describe(channel='Canal onde o painel de tickets ser√° enviado')
async def setup_tickets(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message('Apenas administradores podem usar este comando!', ephemeral=True)
        return
    
    embed = discord.Embed(
        title='üé´ Sistema de Tickets',
        description='Clique no bot√£o abaixo para criar um ticket de suporte.\n\n**Como funciona:**\n‚Ä¢ Clique em "Criar Ticket"\n‚Ä¢ Um canal privado ser√° criado para voc√™\n‚Ä¢ Descreva seu problema ou d√∫vida\n‚Ä¢ Algum administrador ir√° te ajudar!',
        color=0xae0000
    )
    embed.set_footer(text='Sistema de Tickets - Clique no bot√£o para come√ßar')
    
    view = TicketView()
    await channel.send(embed=embed, view=view)
    await interaction.response.send_message(f'Painel de tickets configurado em {channel.mention}!', ephemeral=True)

@bot.tree.command(name='setup_roles', description='Configura o sistema de solicita√ß√£o de cargos')
@discord.app_commands.describe(channel='Canal onde o painel de cargos ser√° enviado')
async def setup_roles(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message('Apenas administradores podem usar este comando!', ephemeral=True)
        return
    
    embed = discord.Embed(
        title='üìã Solicita√ß√£o de Cargos',
        description='Clique no bot√£o abaixo para solicitar um cargo.\n\n**Como funciona:**\n‚Ä¢ Clique em "Solicitar Cargo"\n‚Ä¢ Escolha o cargo desejado\n‚Ä¢ Descreva quem te recrutou\n‚Ä¢ Aguarde a aprova√ß√£o dos administradores',
        color=0xcc3232
    )
    embed.set_footer(text='Sistema de Cargos - Clique no bot√£o para solicitar')
    
    view = RoleRequestView()
    await channel.send(embed=embed, view=view)
    await interaction.response.send_message(f'Painel de cargos configurado em {channel.mention}!', ephemeral=True)

@bot.tree.command(name='config', description='Mostra a configura√ß√£o atual do bot')
async def config_command(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message('Apenas administradores podem usar este comando!', ephemeral=True)
        return
    
    embed = discord.Embed(title='‚öôÔ∏è Configura√ß√£o do Bot', color=0xffd700)
    
    for key, value in CONFIG.items():
        if isinstance(value, list):
            embed.add_field(name=key, value=f'{len(value)} itens configurados', inline=True)
        else:
            embed.add_field(name=key, value=str(value), inline=True)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)


# ========== SISTEMA DE PAINEL DE ADMINISTRA√á√ÉO ==========

import discord
from discord.ext import commands
import json
import os
from datetime import datetime

# Arquivo para salvar advert√™ncias
WARNINGS_FILE = 'warnings.json'

def load_warnings():
    """Carrega as advert√™ncias do arquivo JSON"""
    if os.path.exists(WARNINGS_FILE):
        try:
            with open(WARNINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_warnings(warnings):
    """Salva as advert√™ncias no arquivo JSON"""
    try:
        with open(WARNINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(warnings, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"Erro ao salvar advert√™ncias: {e}")

# ========== MODAIS ==========

class BanModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="Sistema de Banimento")
        
        self.user_input = discord.ui.TextInput(
            label="Usu√°rio (ID ou @men√ß√£o)",
            placeholder="123456789012345678 ou @usuario",
            max_length=50,
            required=True
        )
        
        self.reason_input = discord.ui.TextInput(
            label="Motivo",
            placeholder="Motivo do banimento...",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=False
        )
        
        self.action_input = discord.ui.TextInput(
            label="A√ß√£o (ban/unban)",
            placeholder="ban ou unban",
            max_length=10,
            required=True
        )
        
        self.add_item(self.user_input)
        self.add_item(self.reason_input)
        self.add_item(self.action_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        user_id = self.user_input.value.replace('<', '').replace('>', '').replace('@', '').replace('!', '')
        reason = self.reason_input.value or "N√£o especificado"
        action = self.action_input.value.lower()
        
        try:
            if action == "ban":
                user = await interaction.guild.fetch_member(int(user_id))
                await user.ban(reason=reason)
                
                embed = discord.Embed(
                    title="‚úÖ Usu√°rio Banido",
                    description=f"**Usu√°rio:** {user.mention}\n**Motivo:** {reason}",
                    color=0xff0000,
                    timestamp=datetime.now()
                )
                
            elif action == "unban":
                user = await interaction.client.fetch_user(int(user_id))
                await interaction.guild.unban(user, reason=reason)
                
                embed = discord.Embed(
                    title="‚úÖ Usu√°rio Desbanido",
                    description=f"**Usu√°rio:** {user.mention}\n**Motivo:** {reason}",
                    color=0x00ff00,
                    timestamp=datetime.now()
                )
            else:
                await interaction.response.send_message("‚ùå A√ß√£o inv√°lida! Use 'ban' ou 'unban'", ephemeral=True)
                return
                
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erro: {str(e)}", ephemeral=True)

class RoleModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="Gerenciamento de Cargos")
        
        self.user_input = discord.ui.TextInput(
            label="Usu√°rio (ID ou @men√ß√£o)",
            placeholder="123456789012345678 ou @usuario",
            max_length=50,
            required=True
        )
        
        self.role_input = discord.ui.TextInput(
            label="Cargo (Nome ou ID)",
            placeholder="Nome do cargo ou ID",
            max_length=100,
            required=True
        )
        
        self.action_input = discord.ui.TextInput(
            label="A√ß√£o (add/remove)",
            placeholder="add ou remove",
            max_length=10,
            required=True
        )
        
        self.add_item(self.user_input)
        self.add_item(self.role_input)
        self.add_item(self.action_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        user_id = self.user_input.value.replace('<', '').replace('>', '').replace('@', '').replace('!', '')
        role_name = self.role_input.value
        action = self.action_input.value.lower()
        
        try:
            member = await interaction.guild.fetch_member(int(user_id))
            role = discord.utils.get(interaction.guild.roles, name=role_name) or discord.utils.get(interaction.guild.roles, id=int(role_name) if role_name.isdigit() else None)
            
            if not role:
                await interaction.response.send_message("‚ùå Cargo n√£o encontrado!", ephemeral=True)
                return
            
            if action == "add":
                await member.add_roles(role)
                embed = discord.Embed(
                    title="‚úÖ Cargo Adicionado",
                    description=f"**Usu√°rio:** {member.mention}\n**Cargo:** {role.mention}",
                    color=0x00ff00,
                    timestamp=datetime.now()
                )
                
            elif action == "remove":
                await member.remove_roles(role)
                embed = discord.Embed(
                    title="‚úÖ Cargo Removido",
                    description=f"**Usu√°rio:** {member.mention}\n**Cargo:** {role.mention}",
                    color=0xff9900,
                    timestamp=datetime.now()
                )
            else:
                await interaction.response.send_message("‚ùå A√ß√£o inv√°lida! Use 'add' ou 'remove'", ephemeral=True)
                return
                
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erro: {str(e)}", ephemeral=True)

class WarningModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="Sistema de Advert√™ncias")
        
        self.user_input = discord.ui.TextInput(
            label="Usu√°rio (ID ou @men√ß√£o)",
            placeholder="123456789012345678 ou @usuario",
            max_length=50,
            required=True
        )
        
        self.reason_input = discord.ui.TextInput(
            label="Motivo",
            placeholder="Motivo da advert√™ncia...",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=False
        )
        
        self.action_input = discord.ui.TextInput(
            label="A√ß√£o (add/remove/view)",
            placeholder="add, remove ou view",
            max_length=10,
            required=True
        )
        
        self.add_item(self.user_input)
        self.add_item(self.reason_input)
        self.add_item(self.action_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        user_id = self.user_input.value.replace('<', '').replace('>', '').replace('@', '').replace('!', '')
        reason = self.reason_input.value or "N√£o especificado"
        action = self.action_input.value.lower()
        
        try:
            member = await interaction.guild.fetch_member(int(user_id))
            warnings = load_warnings()
            
            if user_id not in warnings:
                warnings[user_id] = []
            
            if action == "add":
                warnings[user_id].append({
                    'reason': reason,
                    'moderator': str(interaction.user.id),
                    'date': datetime.now().isoformat()
                })
                save_warnings(warnings)
                
                embed = discord.Embed(
                    title="‚ö†Ô∏è Advert√™ncia Adicionada",
                    description=f"**Usu√°rio:** {member.mention}\n**Motivo:** {reason}\n**Total:** {len(warnings[user_id])} advert√™ncias",
                    color=0xffff00,
                    timestamp=datetime.now()
                )
                
            elif action == "remove":
                if warnings[user_id]:
                    warnings[user_id].pop()
                    save_warnings(warnings)
                    
                    embed = discord.Embed(
                        title="‚úÖ Advert√™ncia Removida",
                        description=f"**Usu√°rio:** {member.mention}\n**Advert√™ncias restantes:** {len(warnings[user_id])}",
                        color=0x00ff00,
                        timestamp=datetime.now()
                    )
                else:
                    await interaction.response.send_message("‚ùå Este usu√°rio n√£o possui advert√™ncias!", ephemeral=True)
                    return
                    
            elif action == "view":
                user_warnings = warnings.get(user_id, [])
                
                embed = discord.Embed(
                    title=f"üìã Advert√™ncias de {member.display_name}",
                    description=f"**Total:** {len(user_warnings)} advert√™ncias",
                    color=0x0099ff,
                    timestamp=datetime.now()
                )
                
                if user_warnings:
                    for i, warning in enumerate(user_warnings, 1):
                        date = datetime.fromisoformat(warning['date']).strftime('%d/%m/%Y %H:%M')
                        embed.add_field(
                            name=f"Advert√™ncia {i}",
                            value=f"**Motivo:** {warning['reason']}\n**Data:** {date}",
                            inline=False
                        )
                else:
                    embed.description = "Este usu√°rio n√£o possui advert√™ncias."
            else:
                await interaction.response.send_message("‚ùå A√ß√£o inv√°lida! Use 'add', 'remove' ou 'view'", ephemeral=True)
                return
                
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erro: {str(e)}", ephemeral=True)

class EmbedModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="Criador de Embed")
        
        self.title_input = discord.ui.TextInput(
            label="T√≠tulo",
            placeholder="T√≠tulo do embed...",
            max_length=256,
            required=False
        )
        
        self.description_input = discord.ui.TextInput(
            label="Descri√ß√£o",
            placeholder="Descri√ß√£o do embed...",
            style=discord.TextStyle.paragraph,
            max_length=2000,
            required=False
        )
        
        self.fields_input = discord.ui.TextInput(
            label="Fields (Nome|Valor|Inline)",
            placeholder="Campo1|Valor1|True\nCampo2|Valor2|False",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=False
        )
        
        self.footer_input = discord.ui.TextInput(
            label="Footer",
            placeholder="Texto do footer...",
            max_length=2048,
            required=False
        )
        
        self.image_input = discord.ui.TextInput(
            label="URL da Imagem",
            placeholder="https://exemplo.com/imagem.png",
            max_length=500,
            required=False
        )
        
        self.add_item(self.title_input)
        self.add_item(self.description_input)
        self.add_item(self.fields_input)
        self.add_item(self.footer_input)
        self.add_item(self.image_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        embed = discord.Embed(color=0x0099ff, timestamp=datetime.now())
        
        if self.title_input.value:
            embed.title = self.title_input.value
        
        if self.description_input.value:
            embed.description = self.description_input.value
        
        if self.footer_input.value:
            embed.set_footer(text=self.footer_input.value)
        
        if self.image_input.value:
            embed.set_image(url=self.image_input.value)
        
        if self.fields_input.value:
            fields = self.fields_input.value.split('\n')
            for field in fields:
                parts = field.split('|')
                if len(parts) >= 2:
                    name = parts[0]
                    value = parts[1]
                    inline = parts[2].lower() == 'true' if len(parts) > 2 else False
                    embed.add_field(name=name, value=value, inline=inline)
        
        await interaction.response.send_message("‚úÖ Embed criado com sucesso!", ephemeral=True)
        await interaction.followup.send(embed=embed)

# ========== VIEW DO PAINEL ==========

class AdminPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="Banimento", style=discord.ButtonStyle.danger, emoji="üî®")
    async def ban_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Voc√™ n√£o tem permiss√£o para usar esta funcionalidade!", ephemeral=True)
            return
        
        await interaction.response.send_modal(BanModal())
    
    @discord.ui.button(label="Cargos", style=discord.ButtonStyle.primary, emoji="üëë")
    async def roles_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Voc√™ n√£o tem permiss√£o para usar esta funcionalidade!", ephemeral=True)
            return
        
        await interaction.response.send_modal(RoleModal())
    
    @discord.ui.button(label="Advert√™ncias", style=discord.ButtonStyle.secondary, emoji="‚ö†Ô∏è")
    async def warnings_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Voc√™ n√£o tem permiss√£o para usar esta funcionalidade!", ephemeral=True)
            return
        
        await interaction.response.send_modal(WarningModal())
    
    @discord.ui.button(label="Embed", style=discord.ButtonStyle.success, emoji="üìù")
    async def embed_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Voc√™ n√£o tem permiss√£o para usar esta funcionalidade!", ephemeral=True)
            return
        
        await interaction.response.send_modal(EmbedModal())

# ========== COMANDOS ==========

@bot.tree.command(name='painel', description='Abre o painel de administra√ß√£o')
async def admin_panel(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message('‚ùå Voc√™ n√£o tem permiss√£o para usar o painel de administra√ß√£o!', ephemeral=True)
        return
    
    embed = discord.Embed(
        title='üõ†Ô∏è Painel de Administra√ß√£o',
        description='Selecione uma op√ß√£o abaixo para gerenciar o servidor:',
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    embed.add_field(
        name='üî® Banimento',
        value='Banir/desbanir usu√°rios do servidor',
        inline=True
    )
    
    embed.add_field(
        name='üëë Cargos',
        value='Adicionar/remover cargos de usu√°rios',
        inline=True
    )
    
    embed.add_field(
        name='‚ö†Ô∏è Advert√™ncias',
        value='Gerenciar advert√™ncias dos usu√°rios',
        inline=True
    )
    
    embed.add_field(
        name='üìù Embed',
        value='Criar embeds personalizados',
        inline=True
    )
    
    embed.set_footer(text='Painel de Administra√ß√£o')
    
    view = AdminPanelView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

@bot.tree.command(name='advertencias', description='Visualiza as advert√™ncias de um usu√°rio')
@discord.app_commands.describe(usuario='Usu√°rio para verificar as advert√™ncias')
async def view_warnings(interaction: discord.Interaction, usuario: discord.Member):
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message('‚ùå Voc√™ n√£o tem permiss√£o para usar este comando!', ephemeral=True)
        return
    
    warnings = load_warnings()
    user_warnings = warnings.get(str(usuario.id), [])
    
    embed = discord.Embed(
        title=f'üìã Advert√™ncias de {usuario.display_name}',
        description=f'**Total:** {len(user_warnings)} advert√™ncias',
        color=0x0099ff,
        timestamp=datetime.now()
    )
    
    if user_warnings:
        for i, warning in enumerate(user_warnings, 1):
            date = datetime.fromisoformat(warning['date']).strftime('%d/%m/%Y %H:%M')
            embed.add_field(
                name=f'Advert√™ncia {i}',
                value=f"**Motivo:** {warning['reason']}\n**Data:** {date}",
                inline=False
            )
    else:
        embed.description = 'Este usu√°rio n√£o possui advert√™ncias.'
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name='ban', description='Bane um usu√°rio do servidor')
@discord.app_commands.describe(usuario='Usu√°rio a ser banido', motivo='Motivo do banimento')
async def ban_user(interaction: discord.Interaction, usuario: discord.Member, motivo: str = "N√£o especificado"):
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message('‚ùå Voc√™ n√£o tem permiss√£o para banir usu√°rios!', ephemeral=True)
        return
    
    try:
        await usuario.ban(reason=motivo)
        
        embed = discord.Embed(
            title='‚úÖ Usu√°rio Banido',
            description=f'**Usu√°rio:** {usuario.mention}\n**Motivo:** {motivo}',
            color=0xff0000,
            timestamp=datetime.now()
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(f'‚ùå Erro ao banir usu√°rio: {str(e)}', ephemeral=True)

@bot.tree.command(name='unban', description='Desbane um usu√°rio do servidor')
@discord.app_commands.describe(user_id='ID do usu√°rio a ser desbanido', motivo='Motivo do desbanimento')
async def unban_user(interaction: discord.Interaction, user_id: str, motivo: str = "N√£o especificado"):
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message('‚ùå Voc√™ n√£o tem permiss√£o para desbanir usu√°rios!', ephemeral=True)
        return
    
    try:
        user = await bot.fetch_user(int(user_id))
        await interaction.guild.unban(user, reason=motivo)
        
        embed = discord.Embed(
            title='‚úÖ Usu√°rio Desbanido',
            description=f'**Usu√°rio:** {user.mention}\n**Motivo:** {motivo}',
            color=0x00ff00,
            timestamp=datetime.now()
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(f'‚ùå Erro ao desbanir usu√°rio: {str(e)}', ephemeral=True)

print("‚úÖ Sistema de Painel de Administra√ß√£o carregado com sucesso!")

# ========== EVENTOS ==========

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    # Salva mensagens em tickets
    if message.channel.name and message.channel.name.startswith('ticket-'):
        ticket_id = str(message.channel.id)
        if ticket_id in tickets_data:
            tickets_data[ticket_id]['messages'].append({
                'timestamp': message.created_at.isoformat(),
                'author': str(message.author),
                'content': message.content
            })
    
    await bot.process_commands(message)



# ========== INICIALIZA√á√ÉO ==========

if __name__ == '__main__':
    print("üöÄ Iniciando bot...")
    # SUBSTITUA 'SEU_TOKEN_AQUI' pelo token real do seu bot
    bot.run('MTM5MDQxNzYyNTQzNTM0MDkyMw.GnyBB9.NVegqSOBlCg6FlyXCjf7z3tGMMcSYDE88pTdsY')